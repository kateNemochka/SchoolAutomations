import os
import sys
import ctypes
import subprocess
import shutil
from datetime import datetime, timedelta


def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False


def log(message):
    try:
        log_dir = r"C:\Logs"
        os.makedirs(log_dir, exist_ok=True)
        log_path = os.path.join(log_dir, "clean_log.txt")
        with open(log_path, "a", encoding="utf-8") as f:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            f.write(f"[{timestamp}] {message}\n")
    except Exception as e:
        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø–∏—Å–∞—Ç–∏ –ª–æ–≥: {e}")


def clean_pycharm_projects():
    home_dir = os.path.expanduser("~")
    projects_path = os.path.join(home_dir, 'PycharmProjects')
    log(f"üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ–∫–∏: {projects_path}")

    if os.path.exists(projects_path):
        for item in os.listdir(projects_path):
            item_path = os.path.join(projects_path, item)
            try:
                if os.path.isfile(item_path) or os.path.islink(item_path):
                    os.remove(item_path)
                elif os.path.isdir(item_path):
                    shutil.rmtree(item_path)
                log(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ: {item_path}")
            except Exception as e:
                log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è {item_path}: {e}")
    else:
        log("‚ÑπÔ∏è –ü–∞–ø–∫–∞ –≤—ñ–¥—Å—É—Ç–Ω—è, –æ—á–∏—â–µ–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ.")


def delete_roblox_files():
    log("üßπ –ü–æ—à—É–∫ —ñ –≤–∏–¥–∞–ª–µ–Ω–Ω—è 'Roblox' —Ñ–∞–π–ª—ñ–≤/–ø–∞–ø–æ–∫...")
    paths_to_check = [
        os.path.expanduser("~"),
        os.path.join(os.environ.get("APPDATA", ""), "Local"),
        os.environ.get("PROGRAMDATA", ""),
        os.path.join("C:\\", "Program Files"),
        os.path.join("C:\\", "Program Files (x86)")
    ]

    for base_path in paths_to_check:
        if not base_path or not os.path.exists(base_path):
            continue

        for root, dirs, files in os.walk(base_path, topdown=True):
            # –í–∏–∫–ª—é—á–∞—î–º–æ —Å–∏—Å—Ç–µ–º–Ω—ñ –ø–∞–ø–∫–∏
            dirs[:] = [d for d in dirs if "windows" not in d.lower() and "microsoft" not in d.lower()]
            for dir_name in dirs:
                if "roblox" in dir_name.lower():
                    full_path = os.path.join(root, dir_name)
                    try:
                        shutil.rmtree(full_path)
                        log(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –ø–∞–ø–∫—É: {full_path}")
                    except Exception as e:
                        log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–∞–ø–∫–∏ {full_path}: {e}")

            for file_name in files:
                if "roblox" in file_name.lower():
                    full_path = os.path.join(root, file_name)
                    try:
                        os.remove(full_path)
                        log(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª: {full_path}")
                    except Exception as e:
                        log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É {full_path}: {e}")


def create_cmd_launcher():
    """
    –°—Ç–≤–æ—Ä—é—î CMD-—Ñ–∞–π–ª, —è–∫–∏–π –∑–∞–ø—É—Å–∫–∞—î —Ü–µ–π —Å–∫—Ä–∏–ø—Ç –∑ –ø—Ä–∞–ø–æ—Ä—Ü–µ–º --delete-only.
    –ü—Ä–∏ –∑–∞–ø—É—Å–∫—É —á–µ—Ä–µ–∑ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –±—É–¥–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—å –ª–∏—à–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è.
    """
    script_path = os.path.abspath(__file__)
    python_path = sys.executable
    cmd_path = os.path.join(os.path.dirname(script_path), "run_clean.cmd")
    content = f'@echo off\n"{python_path}" "{script_path}" --delete-only\n'
    try:
        with open(cmd_path, "w", encoding="utf-8") as f:
            f.write(content)
        log(f"‚öôÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–æ CMD-–ª–∞—É–Ω—á–µ—Ä: {cmd_path}")
    except Exception as e:
        log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è CMD-—Ñ–∞–π–ª—É: {e}")
    return cmd_path


def create_scheduler_task_with_xml(cmd_path):
    """
    –°—Ç–≤–æ—Ä—é—î –∑–∞–≤–¥–∞–Ω–Ω—è –≤ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫—É —á–µ—Ä–µ–∑ XML, —è–∫–µ:
    - –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è —â–æ–ø–æ–Ω–µ–¥—ñ–ª–∫–∞ —Ç–∞ —â–æ–≤—ñ–≤—Ç–æ—Ä–∫–∞ –æ 08:30.
    - –ú–∞—î –æ–ø—Ü—ñ—é "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –æ–¥—Ä–∞–∑—É, —è–∫—â–æ –±—É–ª–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è".
    """
    task_name = "MyCleanupTask"
    now = datetime.now()

    # –û–±—á–∏—Å–ª—é—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∑–∞–ø—É—Å–∫: —è–∫—â–æ –∑–∞—Ä–∞–∑ –ø—ñ—Å–ª—è 08:30 —É –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ —á–∏ –≤—ñ–≤—Ç–æ—Ä–æ–∫, –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π.
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å, —è–∫–∏–π —î –ø–æ–Ω–µ–¥—ñ–ª–∫–æ–º –∞–±–æ –≤—ñ–≤—Ç–æ—Ä–∫–æ–º.
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–∏–º–æ StartBoundary –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á–∏–π –ø–æ–Ω–µ–¥—ñ–ª–æ–∫.
    weekday = now.weekday()  # Monday = 0, Tuesday = 1, ..., Sunday = 6
    days_until_monday = (0 - weekday) % 7
    if days_until_monday == 0 and (now.hour > 8 or (now.hour == 8 and now.minute >= 30)):
        days_until_monday = 7
    next_start = now + timedelta(days=days_until_monday)
    start_boundary = next_start.replace(hour=8, minute=30, second=0, microsecond=0).isoformat()

    xml_content = f'''<?xml version="1.0" encoding="UTF-16"?>
<Task version="1.2" xmlns="http://schemas.microsoft.com/windows/2004/02/mit/task">
  <RegistrationInfo>
    <Date>{datetime.now().isoformat()}</Date>
    <Author>{os.getlogin()}</Author>
  </RegistrationInfo>
  <Triggers>
    <CalendarTrigger>
      <StartBoundary>{start_boundary}</StartBoundary>
      <Enabled>true</Enabled>
      <ScheduleByWeek>
        <WeeksInterval>1</WeeksInterval>
        <DaysOfWeek>
          <Monday/>
          <Tuesday/>
        </DaysOfWeek>
      </ScheduleByWeek>
    </CalendarTrigger>
  </Triggers>
  <Principals>
    <Principal id="Author">
      <RunLevel>HighestAvailable</RunLevel>
    </Principal>
  </Principals>
  <Settings>
    <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>
    <DisallowStartIfOnBatteries>false</DisallowStartIfOnBatteries>
    <StopIfGoingOnBatteries>false</StopIfGoingOnBatteries>
    <AllowHardTerminate>true</AllowHardTerminate>
    <StartWhenAvailable>true</StartWhenAvailable>
    <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>
    <IdleSettings>
      <StopOnIdleEnd>false</StopOnIdleEnd>
      <RestartOnIdle>false</RestartOnIdle>
    </IdleSettings>
    <AllowStartOnDemand>true</AllowStartOnDemand>
    <Enabled>true</Enabled>
    <Hidden>false</Hidden>
    <RunOnlyIfIdle>false</RunOnlyIfIdle>
    <WakeToRun>false</WakeToRun>
    <ExecutionTimeLimit>PT0S</ExecutionTimeLimit>
    <Priority>7</Priority>
  </Settings>
  <Actions Context="Author">
    <Exec>
      <Command>{cmd_path}</Command>
    </Exec>
  </Actions>
</Task>
'''
    xml_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), "temp_task.xml")
    try:
        with open(xml_file, "w", encoding="utf-16") as f:
            f.write(xml_content)
        schtasks_command = f'schtasks /Create /TN "{task_name}" /XML "{xml_file}" /F'
        subprocess.run(schtasks_command, shell=True, check=True)
        log(f"‚öôÔ∏è –ó–∞–≤–¥–∞–Ω–Ω—è '{task_name}' —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ XML: {xml_file}")
    except Exception as e:
        log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è —á–µ—Ä–µ–∑ XML: {e}")
    finally:
        try:
            os.remove(xml_file)
        except Exception as e:
            log(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π XML: {e}")


def perform_deletions():
    clean_pycharm_projects()
    delete_roblox_files()


if __name__ == "__main__":
    # –ó–º—ñ–Ω–∞ —Ä–æ–±–æ—á–æ—ó —Ç–µ–∫–∏ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é —Å–∫—Ä–∏–ø—Ç–∞
    os.chdir(os.path.dirname(os.path.abspath(__file__)))
    log("üöÄ –°—Ç–∞—Ä—Ç —Å–∫—Ä–∏–ø—Ç–∞")

    # –Ø–∫—â–æ –∑–∞–ø—É—Å–∫–∞—î–º–æ –∑ –ø—Ä–∞–ø–æ—Ä—Ü–µ–º --delete-only, –≤–∏–∫–æ–Ω—É—î–º–æ –ª–∏—à–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    if "--delete-only" in sys.argv:
        log("‚ñ∂ –ó–∞–ø—É—Å–∫ —É —Ä–µ–∂–∏–º—ñ —Ç—ñ–ª—å–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è (–±–µ–∑ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Scheduler —Ç–∞ CMD)")
        perform_deletions()
    else:
        log("‚ñ∂ –ó–∞–ø—É—Å–∫ —É –∑–≤–∏—á–∞–π–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ (—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Scheduler, CMD, –∞ –ø–æ—Ç—ñ–º –≤–∏–¥–∞–ª–µ–Ω–Ω—è)")
        if not is_admin():
            log("üîê –ù–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ —Å–∫—Ä–∏–ø—Ç –∑ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è–º –ø—Ä–∞–≤...")
            ctypes.windll.shell32.ShellExecuteW(
                None, "runas", sys.executable, f'"{os.path.abspath(__file__)}"', None, 1
            )
            sys.exit()

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è CMD-—Ñ–∞–π–ª—É –¥–ª—è –∑–∞–ø—É—Å–∫—É —Å–∫—Ä–∏–ø—Ç–∞ –≤ —Ä–µ–∂–∏–º—ñ --delete-only
        cmd_launcher_path = create_cmd_launcher()
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –≤ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫—É —á–µ—Ä–µ–∑ XML —ñ–∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏:
        # - –©–æ–ø–æ–Ω–µ–¥—ñ–ª–∫–∞ —Ç–∞ —â–æ–≤—ñ–≤—Ç–æ—Ä–∫–∞ –æ 08:30.
        # - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –æ–¥—Ä–∞–∑—É, —è–∫—â–æ –±—É–ª–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.
        create_scheduler_task_with_xml(cmd_launcher_path)
        # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        perform_deletions()
